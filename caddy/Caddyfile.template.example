# This Caddyfile is generated by sjtug/lug's bundled script
# DO NOT EDIT manually!
# Instead, change Caddyfile.template and regenerate Caddyfile

{{/* input data source should be named as "cfg": -d cfg=config.yaml */}}
{{ $cfg := (ds "cfg") }}

{{/* address of lug backend */}}
{{ $lug_addr := "lug:7001" }}

{{ $base := "mirrors.sjtug.sjtu.edu.cn" }}

{{/* configure methods to protect your admin API */}}
{{ define "login_config" }}
    {{/* by default this uses Github OAuth, change it to your needs! */}}
    {{/* the sample OAuth application only allows redirection to 127.0.0.1:2015, so register your own OAuth App! */}}
    github client_id=enter_your_id,client_secret=enter_your_secret
    jwt_expiry 24h
    cookie_expiry 2400h
{{ end }}

{{ define "jwt_config" }}
    {{/* only allow username=htfy96 */}}
    allow sub htfy96
{{ end }}

{{ define "tls_certkey" }}  {{ end }}

{{define "serve_local_common_config"}}
    log stdout
{{ end }}

{{ define "reverse_proxy_common_config" }}
    log stdout
    ratelimit * / 200 400 minute
{{ end }}

{{ define "reverse_proxy_common_proxy_config" }}
        max_conns 100
        header_upstream X-Real-IP {remote}
        header_upstream X-Forwarded-For {remote}
        header_upstream X-Forwarded-Proto {scheme}
{{ end }}

# Prometheus
# Exposed at :9180
{{$base}}/ {
    prometheus {
	    address 0.0.0.0:9180
    }

    cors

    root /mirror-frontend
    {{ template "serve_local_common_config" }}

    # TLS
    # tls {{ template "tls_certkey" }}

    ratelimit * /lug 4 8 second
    # API
    proxy /lug/ {{$lug_addr}} {
        {{ template "reverse_proxy_common_proxy_config" }}
    }

    jwt {
        path /lug/v1/admin
        {{ template "jwt_config" }}
    }

    login {
        {{ template "login_config" }}
    }
    gzip

    proxy /git http://git-http-backend {
    }
}

{{ range $name, $worker := $cfg.repos }}
# worker {{$name}}
{{ if and (and (index $worker "name") (index $worker "path")) (not (index $worker "no_direct_serving")) }}  {{/* specify name and path */}}
{{$base}}/{{$worker.name}} {
    root {{$worker.path}}
    browse
    {{ template "serve_local_common_config" }}
}

{{ if index $worker "subdomain" }}
{{$worker.subdomain}}.{{$base}}/ {
    root {{$worker.path}}
    browse
    {{ template "serve_local_common_config" }}
}
{{ end }} {{/* if index $worker subdomain */}}
{{ end }}

{{ if and (index $worker "name") (index $worker "proxy_to") }} {{/* reverse_proxy */}}
{{$base}}/{{$worker.name}} {
    # tls {{ template "tls_certkey" }}
    proxy / {{$worker.proxy_to}} {
        without /{{$worker.name}}
        {{ template "reverse_proxy_common_proxy_config" }}
    }

    {{ if or (index $worker "filter_path") (index $worker "filter_content_type") }}
	    filter rule {
		    {{ if index $worker "filter_path" }} path {{$worker.filter_path}} {{ end }}
		    {{ if index $worker "filter_content_type" }} content_type {{$worker.filter_content_type}} {{ end }}
		    search_pattern {{$worker.filter_search_pattern}}
		    replacement "{{$worker.filter_replacement}}"
	    }
    {{ end }} {{/* if filters */}}

    {{ template "reverse_proxy_common_config" }}
}

{{ if index $worker "subdomain" }}
{{$worker.subdomain}}.{{$base}}/ {
    # tls {{ template "tls_certkey" }}
    proxy / {{$worker.proxy_to}} {
        without /{{$worker.name}}
        {{ template "reverse_proxy_common_proxy_config" }}
    }
    {{ if or (index $worker "filter_path") (index $worker "filter_content_type") }}
	    filter rule {
		    {{ if index $worker "filter_path" }} path {{$worker.filter_path}} {{ end }}
		    {{ if index $worker "filter_content_type" }} content_type {{$worker.filter_content_type}} {{ end }}
		    search_pattern {{$worker.filter_search_pattern}}
		    replacement "{{$worker.filter_replacement}}"
	    }
    {{ end }} {{/* if filters */}}
    {{ template "reverse_proxy_common_config" }}
}
{{ end }} {{/* subdomain */}}
{{ end }} {{/* if $worker */}}
{{ end }} {{/* range */}}

